---
- name: Instalar EscalaServer no cliente
  hosts: windows
  gather_facts: no
  vars:
    nomeservico: "escalaserver_{{ cliente | lower }}"
    arquivos_necessarios:
      - EscalaServer.exe
      - EscalaServerManager.exe
      - EscalaServerUpdate.exe

  tasks:

    - name: Obtém letra do drive pelo nome do volume (rótulo)
      win_shell: |
        (Get-Volume | Where-Object {$_.FileSystemLabel -eq '{{ cliente }}'}).DriveLetter
      register: letra_drive_result

    - name: Falha se drive com rótulo não for encontrado
      fail:
        msg: "Não foi encontrado nenhum drive com o rótulo '{{ cliente }}'."
      when: letra_drive_result.stdout | trim == ""

    - name: Define variáveis com base na letra do drive
      set_fact:
        drive: "{{ letra_drive_result.stdout | trim }}:"
        base_path: "{{ letra_drive_result.stdout | trim }}:\\escalasoft"
        ferramentas_path: "{{ letra_drive_result.stdout | trim }}:\\escalasoft\\ferramentas"
        sistema_path: "{{ letra_drive_result.stdout | trim }}:\\escalasoft\\sistema"
        atualizacao_path: "{{ letra_drive_result.stdout | trim }}:\\escalasoft\\ferramentas\\atualizacao"

    - name: Cria a pasta Escalasoft
      win_file:
        path: "{{ base_path }}"
        state: directory

    - name: Cria a pasta Ferramentas
      win_file:
        path: "{{ ferramentas_path }}"
        state: directory

    - name: Cria a pasta Sistema
      win_file:
        path: "{{ sistema_path }}"
        state: directory

    - name: Cria a pasta Atualizacao
      win_file:
        path: "{{ atualizacao_path }}"
        state: directory

    - name: Verifica se os arquivos estão na pasta Ferramentas
      win_stat:
        path: "{{ ferramentas_path }}\\{{ item }}"
      register: stat_ferramentas
      loop: "{{ arquivos_necessarios }}"

    - name: Copia arquivos ausentes para Ferramentas
      win_copy:
        src: "executaveis/server/{{ item }}"
        dest: "{{ ferramentas_path }}\\{{ item }}"
      when: >
        (stat_ferramentas.results |
        selectattr('item', 'equalto', item) |
        first).stat.exists == false
      loop: "{{ arquivos_necessarios }}"


    - name: Verifica se os arquivos estão na pasta Atualizacao
      win_stat:
        path: "{{ atualizacao_path }}\\{{ item }}"
      register: stat_atualizacao
      loop: "{{ arquivos_necessarios }}"

    - name: Copia arquivos ausentes para Atualizacao
      win_copy:
        src: "executaveis/server/{{ item }}"
        dest: "{{ atualizacao_path }}\\{{ item }}"
      when: >
        (stat_atualizacao.results |
        selectattr('item', 'equalto', item) |
        first).stat.exists == false
      loop: "{{ arquivos_necessarios }}"

    - name: Executa comando de instalação do serviço como administrador via PowerShell
      win_shell: |
        Start-Process -FilePath "{{ atualizacao_path }}\\EscalaServer.exe" `
                      -ArgumentList "/NOMESERVICO:{{ nomeservico }} /PORTA:{{ porta }} /install" `
                      -WorkingDirectory "{{ atualizacao_path }}" `
                      -Verb RunAs -WindowStyle Hidden
      args:
        executable: powershell
